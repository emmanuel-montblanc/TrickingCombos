// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrickingCombos.API.Data;

#nullable disable

namespace TrickingCombos.API.Migrations
{
    [DbContext(typeof(TricksDbContext))]
    [Migration("20250415211519_UpdateCascadeBehaviourTransitionStance")]
    partial class UpdateCascadeBehaviourTransitionStance
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("StanceTransition", b =>
                {
                    b.Property<Guid>("StancesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransitionsId")
                        .HasColumnType("TEXT");

                    b.HasKey("StancesId", "TransitionsId");

                    b.HasIndex("TransitionsId");

                    b.ToTable("StanceTransition");
                });

            modelBuilder.Entity("StanceVariation", b =>
                {
                    b.Property<Guid>("StancesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VariationsId")
                        .HasColumnType("TEXT");

                    b.HasKey("StancesId", "VariationsId");

                    b.HasIndex("VariationsId");

                    b.ToTable("StanceVariation");
                });

            modelBuilder.Entity("TransitionTrick", b =>
                {
                    b.Property<Guid>("TransitionsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TricksId")
                        .HasColumnType("TEXT");

                    b.HasKey("TransitionsId", "TricksId");

                    b.HasIndex("TricksId");

                    b.ToTable("TransitionTrick");
                });

            modelBuilder.Entity("TrickVariation", b =>
                {
                    b.Property<Guid>("TricksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VariationsId")
                        .HasColumnType("TEXT");

                    b.HasKey("TricksId", "VariationsId");

                    b.HasIndex("VariationsId");

                    b.ToTable("TrickVariation");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.Stance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Stances");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.Transition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Transitions");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.TransitionStanceLink", b =>
                {
                    b.Property<Guid>("TransitionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StanceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("StanceId1")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TransitionId1")
                        .HasColumnType("TEXT");

                    b.HasKey("TransitionId", "StanceId");

                    b.HasIndex("StanceId");

                    b.HasIndex("StanceId1");

                    b.HasIndex("TransitionId1");

                    b.ToTable("TransitionStances");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.Trick", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DefaultLandingStanceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DefaultLandingStanceId");

                    b.ToTable("Tricks");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.TrickTransitionLink", b =>
                {
                    b.Property<Guid>("TrickId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransitionId")
                        .HasColumnType("TEXT");

                    b.HasKey("TrickId", "TransitionId");

                    b.HasIndex("TransitionId");

                    b.ToTable("TrickTransitions");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.TrickVariationLink", b =>
                {
                    b.Property<Guid>("TrickId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VariationId")
                        .HasColumnType("TEXT");

                    b.HasKey("TrickId", "VariationId");

                    b.HasIndex("VariationId");

                    b.ToTable("TrickVariations");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.Variation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Variations");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.VariationStanceLink", b =>
                {
                    b.Property<Guid>("VariationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StanceId")
                        .HasColumnType("TEXT");

                    b.HasKey("VariationId", "StanceId");

                    b.HasIndex("StanceId");

                    b.ToTable("VariationStances");
                });

            modelBuilder.Entity("StanceTransition", b =>
                {
                    b.HasOne("TrickingCombos.API.Models.Stance", null)
                        .WithMany()
                        .HasForeignKey("StancesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrickingCombos.API.Models.Transition", null)
                        .WithMany()
                        .HasForeignKey("TransitionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StanceVariation", b =>
                {
                    b.HasOne("TrickingCombos.API.Models.Stance", null)
                        .WithMany()
                        .HasForeignKey("StancesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrickingCombos.API.Models.Variation", null)
                        .WithMany()
                        .HasForeignKey("VariationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TransitionTrick", b =>
                {
                    b.HasOne("TrickingCombos.API.Models.Transition", null)
                        .WithMany()
                        .HasForeignKey("TransitionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrickingCombos.API.Models.Trick", null)
                        .WithMany()
                        .HasForeignKey("TricksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrickVariation", b =>
                {
                    b.HasOne("TrickingCombos.API.Models.Trick", null)
                        .WithMany()
                        .HasForeignKey("TricksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrickingCombos.API.Models.Variation", null)
                        .WithMany()
                        .HasForeignKey("VariationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrickingCombos.API.Models.TransitionStanceLink", b =>
                {
                    b.HasOne("TrickingCombos.API.Models.Stance", "Stance")
                        .WithMany()
                        .HasForeignKey("StanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrickingCombos.API.Models.Stance", null)
                        .WithMany("TransitionStances")
                        .HasForeignKey("StanceId1");

                    b.HasOne("TrickingCombos.API.Models.Transition", "Transition")
                        .WithMany()
                        .HasForeignKey("TransitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrickingCombos.API.Models.Transition", null)
                        .WithMany("TransitionStances")
                        .HasForeignKey("TransitionId1");

                    b.Navigation("Stance");

                    b.Navigation("Transition");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.Trick", b =>
                {
                    b.HasOne("TrickingCombos.API.Models.Stance", "DefaultLandingStance")
                        .WithMany()
                        .HasForeignKey("DefaultLandingStanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultLandingStance");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.TrickTransitionLink", b =>
                {
                    b.HasOne("TrickingCombos.API.Models.Transition", "Transition")
                        .WithMany("TrickTransitions")
                        .HasForeignKey("TransitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrickingCombos.API.Models.Trick", "Trick")
                        .WithMany("TrickTransitionsLinks")
                        .HasForeignKey("TrickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transition");

                    b.Navigation("Trick");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.TrickVariationLink", b =>
                {
                    b.HasOne("TrickingCombos.API.Models.Trick", "Trick")
                        .WithMany("TrickVariationsLinks")
                        .HasForeignKey("TrickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrickingCombos.API.Models.Variation", "Variation")
                        .WithMany("TrickVariations")
                        .HasForeignKey("VariationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trick");

                    b.Navigation("Variation");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.VariationStanceLink", b =>
                {
                    b.HasOne("TrickingCombos.API.Models.Stance", "Stance")
                        .WithMany("VariationStances")
                        .HasForeignKey("StanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrickingCombos.API.Models.Variation", "Variation")
                        .WithMany("VariationStances")
                        .HasForeignKey("VariationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stance");

                    b.Navigation("Variation");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.Stance", b =>
                {
                    b.Navigation("TransitionStances");

                    b.Navigation("VariationStances");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.Transition", b =>
                {
                    b.Navigation("TransitionStances");

                    b.Navigation("TrickTransitions");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.Trick", b =>
                {
                    b.Navigation("TrickTransitionsLinks");

                    b.Navigation("TrickVariationsLinks");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.Variation", b =>
                {
                    b.Navigation("TrickVariations");

                    b.Navigation("VariationStances");
                });
#pragma warning restore 612, 618
        }
    }
}
