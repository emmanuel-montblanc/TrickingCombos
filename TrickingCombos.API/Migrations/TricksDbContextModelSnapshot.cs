// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrickingCombos.API.Data;

#nullable disable

namespace TrickingCombos.API.Migrations
{
    [DbContext(typeof(TricksDbContext))]
    partial class TricksDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("StanceTransition", b =>
                {
                    b.Property<string>("StancesName")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransitionsName")
                        .HasColumnType("TEXT");

                    b.HasKey("StancesName", "TransitionsName");

                    b.HasIndex("TransitionsName");

                    b.ToTable("StanceTransition");
                });

            modelBuilder.Entity("StanceVariation", b =>
                {
                    b.Property<string>("StancesName")
                        .HasColumnType("TEXT");

                    b.Property<string>("VariationsName")
                        .HasColumnType("TEXT");

                    b.HasKey("StancesName", "VariationsName");

                    b.HasIndex("VariationsName");

                    b.ToTable("StanceVariation");
                });

            modelBuilder.Entity("TransitionTrick", b =>
                {
                    b.Property<string>("TransitionsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("TricksName")
                        .HasColumnType("TEXT");

                    b.HasKey("TransitionsName", "TricksName");

                    b.HasIndex("TricksName");

                    b.ToTable("TransitionTrick");
                });

            modelBuilder.Entity("TrickVariation", b =>
                {
                    b.Property<string>("TricksName")
                        .HasColumnType("TEXT");

                    b.Property<string>("VariationsName")
                        .HasColumnType("TEXT");

                    b.HasKey("TricksName", "VariationsName");

                    b.HasIndex("VariationsName");

                    b.ToTable("TrickVariation");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.Stance", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Stances");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.Transition", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Transitions");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.TransitionStanceLink", b =>
                {
                    b.Property<string>("TransitionName")
                        .HasColumnType("TEXT");

                    b.Property<string>("StanceName")
                        .HasColumnType("TEXT");

                    b.HasKey("TransitionName", "StanceName");

                    b.HasIndex("StanceName");

                    b.ToTable("TransitionStances");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.Trick", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultLandingStanceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.HasIndex("DefaultLandingStanceName");

                    b.ToTable("Tricks");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.TrickTransitionLink", b =>
                {
                    b.Property<string>("TrickName")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransitionName")
                        .HasColumnType("TEXT");

                    b.HasKey("TrickName", "TransitionName");

                    b.HasIndex("TransitionName");

                    b.ToTable("TrickTransitions");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.TrickVariationLink", b =>
                {
                    b.Property<string>("TrickName")
                        .HasColumnType("TEXT");

                    b.Property<string>("VariationName")
                        .HasColumnType("TEXT");

                    b.HasKey("TrickName", "VariationName");

                    b.HasIndex("VariationName");

                    b.ToTable("TrickVariations");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.Variation", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Variations");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.VariationStanceLink", b =>
                {
                    b.Property<string>("VariationName")
                        .HasColumnType("TEXT");

                    b.Property<string>("StanceName")
                        .HasColumnType("TEXT");

                    b.HasKey("VariationName", "StanceName");

                    b.HasIndex("StanceName");

                    b.ToTable("VariationStances");
                });

            modelBuilder.Entity("StanceTransition", b =>
                {
                    b.HasOne("TrickingCombos.API.Models.Stance", null)
                        .WithMany()
                        .HasForeignKey("StancesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrickingCombos.API.Models.Transition", null)
                        .WithMany()
                        .HasForeignKey("TransitionsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StanceVariation", b =>
                {
                    b.HasOne("TrickingCombos.API.Models.Stance", null)
                        .WithMany()
                        .HasForeignKey("StancesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrickingCombos.API.Models.Variation", null)
                        .WithMany()
                        .HasForeignKey("VariationsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TransitionTrick", b =>
                {
                    b.HasOne("TrickingCombos.API.Models.Transition", null)
                        .WithMany()
                        .HasForeignKey("TransitionsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrickingCombos.API.Models.Trick", null)
                        .WithMany()
                        .HasForeignKey("TricksName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrickVariation", b =>
                {
                    b.HasOne("TrickingCombos.API.Models.Trick", null)
                        .WithMany()
                        .HasForeignKey("TricksName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrickingCombos.API.Models.Variation", null)
                        .WithMany()
                        .HasForeignKey("VariationsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrickingCombos.API.Models.TransitionStanceLink", b =>
                {
                    b.HasOne("TrickingCombos.API.Models.Stance", "Stance")
                        .WithMany("TransitionStances")
                        .HasForeignKey("StanceName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrickingCombos.API.Models.Transition", "Transition")
                        .WithMany("TransitionStances")
                        .HasForeignKey("TransitionName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stance");

                    b.Navigation("Transition");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.Trick", b =>
                {
                    b.HasOne("TrickingCombos.API.Models.Stance", "DefaultLandingStance")
                        .WithMany()
                        .HasForeignKey("DefaultLandingStanceName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultLandingStance");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.TrickTransitionLink", b =>
                {
                    b.HasOne("TrickingCombos.API.Models.Transition", "Transition")
                        .WithMany("TrickTransitions")
                        .HasForeignKey("TransitionName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrickingCombos.API.Models.Trick", "Trick")
                        .WithMany("TrickTransitionsLinks")
                        .HasForeignKey("TrickName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transition");

                    b.Navigation("Trick");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.TrickVariationLink", b =>
                {
                    b.HasOne("TrickingCombos.API.Models.Trick", "Trick")
                        .WithMany("TrickVariationsLinks")
                        .HasForeignKey("TrickName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrickingCombos.API.Models.Variation", "Variation")
                        .WithMany("TrickVariations")
                        .HasForeignKey("VariationName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trick");

                    b.Navigation("Variation");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.VariationStanceLink", b =>
                {
                    b.HasOne("TrickingCombos.API.Models.Stance", "Stance")
                        .WithMany("VariationStances")
                        .HasForeignKey("StanceName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrickingCombos.API.Models.Variation", "Variation")
                        .WithMany("VariationStances")
                        .HasForeignKey("VariationName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stance");

                    b.Navigation("Variation");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.Stance", b =>
                {
                    b.Navigation("TransitionStances");

                    b.Navigation("VariationStances");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.Transition", b =>
                {
                    b.Navigation("TransitionStances");

                    b.Navigation("TrickTransitions");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.Trick", b =>
                {
                    b.Navigation("TrickTransitionsLinks");

                    b.Navigation("TrickVariationsLinks");
                });

            modelBuilder.Entity("TrickingCombos.API.Models.Variation", b =>
                {
                    b.Navigation("TrickVariations");

                    b.Navigation("VariationStances");
                });
#pragma warning restore 612, 618
        }
    }
}
